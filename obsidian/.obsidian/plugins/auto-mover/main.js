/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoMoverPlugin
});
module.exports = __toCommonJS(main_exports);

// IO/SettingsIO.ts
var import_obsidian = require("obsidian");
var SettingsIO = class {
  constructor() {
  }
  static getInstance() {
    if (!SettingsIO.instance) {
      SettingsIO.instance = new SettingsIO();
    }
    return SettingsIO.instance;
  }
  init(app) {
    this.app = app;
  }
  /**
   * Exports the plugin settings to a JSON file.
   *
   * @param settings - The settings object to export.
   * @returns A promise that resolves to true if the export was successful, false otherwise.
   */
  async exportSettings(settings) {
    try {
      if (!this.app) {
        throw new Error("App reference not set");
      }
      const settingsData = JSON.stringify(settings, null, 2);
      const electron = window.require ? window.require("electron") : null;
      const remote = electron ? electron.remote : null;
      if (!remote || !remote.dialog) {
        return this.exportToVault(settingsData);
      }
      const { canceled, filePath } = await remote.dialog.showSaveDialog({
        title: "Export AutoMover Settings",
        defaultPath: "AutoMover_settings.json",
        filters: [{ name: "JSON Files", extensions: ["json"] }],
        properties: ["createDirectory"]
      });
      if (canceled || !filePath) {
        return false;
      }
      const fs = require("node:fs");
      fs.writeFileSync(filePath, settingsData);
      new import_obsidian.Notice("Settings exported successfully");
      return true;
    } catch (error) {
      console.error("Failed to export settings:", error);
      new import_obsidian.Notice("Failed to export settings");
      return false;
    }
  }
  /**
   * Exports the settings to the vault.
   * Exports the settings to a file named AutoMover_settings.json
   *
   * @param settingsData - The settings data to export.
   * @returns A promise that resolves to true if the export was successful, false otherwise.
   */
  async exportToVault(settingsData) {
    try {
      const filename = "AutoMover_settings.json";
      await this.app.vault.create(filename, settingsData);
      new import_obsidian.Notice(`Settings exported to vault: ${filename}`);
      return true;
    } catch (error) {
      console.error("Failed to export to vault:", error);
      new import_obsidian.Notice("Failed to export settings to vault");
      return false;
    }
  }
  /**
   * Imports settings from a JSON file.
   *
   * @returns The imported settings or null if the import failed.
   */
  async importSettings() {
    try {
      if (!this.app) {
        throw new Error("App reference not set");
      }
      const electron = window.require ? window.require("electron") : null;
      const remote = electron ? electron.remote : null;
      if (!remote || !remote.dialog) {
        return this.importFromVault();
      }
      const { canceled, filePaths } = await remote.dialog.showOpenDialog({
        title: "Import AutoMover Settings",
        filters: [{ name: "JSON Files", extensions: ["json"] }],
        properties: ["openFile"]
      });
      if (canceled || !filePaths || filePaths.length === 0) {
        return null;
      }
      const fs = require("node:fs");
      const fileContent = fs.readFileSync(filePaths[0], "utf8");
      const importedSettings = JSON.parse(fileContent);
      if (!this.validateSettings(importedSettings)) {
        new import_obsidian.Notice("Invalid settings file format");
        return null;
      }
      new import_obsidian.Notice("Settings imported successfully");
      return importedSettings;
    } catch (error) {
      console.error("Failed to import settings:", error);
      new import_obsidian.Notice("Failed to import settings");
      return null;
    }
  }
  /**
   * Fallback method to import settings from the vault.
   * from the file AutoMover_settings.json
   *
   * @returns The imported settings or null if the import failed.
   */
  async importFromVault() {
    try {
      const filename = "AutoMover_settings.json";
      const file = this.app.vault.getAbstractFileByPath(filename);
      if (!file || !(file instanceof import_obsidian.TFile)) {
        new import_obsidian.Notice(`Could not find ${filename} in vault`);
        return null;
      }
      const fileContent = await this.app.vault.read(file);
      const importedSettings = JSON.parse(fileContent);
      if (!this.validateSettings(importedSettings)) {
        new import_obsidian.Notice("Invalid settings file format");
        return null;
      }
      new import_obsidian.Notice("Settings imported from vault successfully");
      return importedSettings;
    } catch (error) {
      console.error("Failed to import from vault:", error);
      new import_obsidian.Notice("Failed to import settings from vault");
      return null;
    }
  }
  /**
   * Validates the settings object to ensure it has the correct structure.
   *
   * @param settings - The settings object to validate.
   * @return True if the settings object is valid, false otherwise.
   */
  validateSettings(settings) {
    if (!settings)
      return false;
    if (typeof settings.moveOnOpen !== "boolean")
      return false;
    if (!Array.isArray(settings.movingRules))
      return false;
    if (!Array.isArray(settings.exclusionRules))
      return false;
    if (typeof settings.automaticMoving !== "boolean")
      return false;
    if (settings.timer !== null && typeof settings.timer !== "number")
      return false;
    return true;
  }
};
var settingsIO = SettingsIO.getInstance();
var SettingsIO_default = settingsIO;

// Settings/Settings.ts
var DEFAULT_SETTINGS = {
  moveOnOpen: true,
  // moveOnSave: true,
  movingRules: [],
  exclusionRules: [],
  automaticMoving: false,
  timer: null
};

// Models/ExclusionRule.ts
var ExclusionRule = class {
  constructor(regex) {
    this.regex = regex || "";
  }
};

// Models/MovingRule.ts
var MovingRule = class {
  constructor(regex, folder) {
    this.regex = regex || "";
    this.folder = folder || "";
  }
};

// Utils/TimerUtil.ts
var TimerUtil = class {
  constructor() {
    this.timer = null;
  }
  static getInstance() {
    if (!TimerUtil.instance) {
      TimerUtil.instance = new TimerUtil();
    }
    return TimerUtil.instance;
  }
  formatTime(ms) {
    if (ms == null)
      return "00:00:00";
    const totalSeconds = Math.floor(ms / 1e3);
    const hours = String(Math.floor(totalSeconds / 3600)).padStart(2, "0");
    const minutes = String(Math.floor(totalSeconds % 3600 / 60)).padStart(
      2,
      "0"
    );
    const seconds = String(totalSeconds % 60).padStart(2, "0");
    return `${hours}:${minutes}:${seconds}`;
  }
  parseTimeToMs(timeStr) {
    const [h, m, s] = timeStr.split(":").map(Number);
    if ([h, m, s].some((n) => Number.isNaN(n)))
      return 0;
    return ((h != null ? h : 0) * 3600 + (m != null ? m : 0) * 60 + (s != null ? s : 0)) * 1e3;
  }
  startTimer(callback, interval) {
    if (this.timer) {
      clearInterval(this.timer);
    }
    this.timer = setTimeout(callback, interval);
  }
};
var timerUtil = TimerUtil.getInstance();
var TimerUtil_default = timerUtil;

// Settings/SettingsTab.ts
var obsidian = __toESM(require("obsidian"));
var SettingsTab = class extends obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new obsidian.Setting(containerEl).setName("Automatic moving").setHeading();
    new obsidian.Setting(containerEl).setName("Export/Import of settings").setDesc(
      `Import will replace the current settings.
         If you aren't prompted to choose a location, then the file will be exported to/imported from the vault root as AutoMover_settings.json.`
    ).addButton((button) => {
      button.setButtonText("Export settings");
      button.onClick(async () => {
        SettingsIO_default.exportSettings(this.plugin.settings);
      });
    }).addButton((button) => {
      button.setButtonText("Import settings");
      button.onClick(async () => {
        const importedSettings = await SettingsIO_default.importSettings();
        if (importedSettings) {
          this.plugin.settings = importedSettings;
          await this.plugin.saveData(this.plugin.settings);
          this.plugin.app.workspace.trigger(
            "AutoMover:automatic-moving-update",
            this.plugin.settings
          );
          this.display();
        }
      });
    });
    new obsidian.Setting(containerEl).setName("Move on open").setDesc("Should the file be moved when it is opened?").addToggle(
      (cb) => cb.setValue(this.plugin.settings.moveOnOpen).onChange(async (value) => {
        this.plugin.settings.moveOnOpen = value;
        await this.plugin.saveData(this.plugin.settings);
      })
    );
    new obsidian.Setting(containerEl).setName("Manually move").setDesc(
      "Execute the command to go through your notes and move them according to the rules specified below."
    ).addButton((button) => {
      button.setButtonText("Move files");
      button.onClick(async () => {
        this.plugin.goThroughAllFiles();
      });
    });
    const automaticMovingContainer = containerEl.createDiv({});
    new obsidian.Setting(automaticMovingContainer).setName("Automatic moving").setDesc(
      `Execute a timed event that goes through all the files and moves them according to the rules specified below.
		 The formatting is hh:mm:ss (if set 00:05:00 it will execute every 5 minutes).
	     If the timer is set to 0, the automatic moving will do nothing.`
    ).setClass("timer-setting").addToggle(
      (cb) => cb.setValue(this.plugin.settings.automaticMoving).onChange(async (value) => {
        this.plugin.settings.automaticMoving = value;
        await this.plugin.saveData(this.plugin.settings);
        this.app.workspace.trigger(
          "AutoMover:automatic-moving-update",
          this.plugin.settings
        );
        this.display();
      })
    ).addText(
      (cb) => cb.setDisabled(!this.plugin.settings.automaticMoving).setValue(TimerUtil_default.formatTime(this.plugin.settings.timer)).setPlaceholder("hh:mm:ss").onChange(async (value) => {
        this.plugin.settings.timer = TimerUtil_default.parseTimeToMs(value);
        await this.plugin.saveData(this.plugin.settings);
        this.app.workspace.trigger(
          "AutoMover:automatic-moving-update",
          this.plugin.settings
        );
      })
    );
    const tutorialContainer = containerEl.createDiv({
      cls: "moving_rules_container"
    });
    new obsidian.Setting(tutorialContainer).setName("Tutorial").setHeading();
    const description = tutorialContainer.createDiv();
    description.createSpan({
      text: "This plugin allows you to move files to a specified folder based on the file name."
    });
    description.createEl("br", {});
    description.createSpan({
      text: "If you have multiple rules referencing the same file, the first rule will be applied."
    });
    description.createEl("br", {});
    description.createSpan({
      text: "Usage of regex groups is supported. To use them in the folder name, use $1, $2, etc. to reference the group."
    });
    description.createEl("br", {});
    description.createEl("br", {});
    description.createSpan({ text: "Examples: ", cls: "rule_title" });
    description.createEl("br", {});
    description.createSpan({
      text: "To move files containing 'Scroll' to a folder named 'Scrolls': "
    });
    const example1 = description.createDiv({ cls: "rule margig_right" });
    example1.createSpan({ text: "Scroll", cls: "rule_title" });
    example1.createSpan({ text: "Scrolls", cls: "rule_title" });
    description.createSpan({
      text: "To move files containing the word 'Scroll' and a number to space -> to a folder named 'Scrolls' under the subfolder of the scroll number: "
    });
    const example2 = description.createDiv({ cls: "rule margig_right" });
    example2.createSpan({ text: "Scroll (\\d+)", cls: "rule_title" });
    example2.createSpan({ text: "Scrolls/$1", cls: "rule_title" });
    const movingRulesContainer = containerEl.createDiv({
      cls: "moving_rules_container"
    });
    new obsidian.Setting(movingRulesContainer).setName("Moving rules").setHeading();
    const ruleList = movingRulesContainer.createDiv({ cls: "rule_list" });
    const ruleHeader = ruleList.createDiv({ cls: "rule margig_right" });
    ruleHeader.createEl("p", {
      text: "Search criteria (string or regex)",
      cls: "rule_title"
    });
    ruleHeader.createEl("p", {
      text: "Folder (string that can contain regex groups)",
      cls: "rule_title"
    });
    const addRuleButton = ruleHeader.createEl("button", {
      text: "+",
      cls: "rule_button"
    });
    addRuleButton.addEventListener("click", () => {
      this.plugin.settings.movingRules.push(new MovingRule());
      this.display();
    });
    for (const rule of this.plugin.settings.movingRules) {
      const child = ruleList.createDiv({ cls: "rule" });
      child.createEl("input", {
        value: rule.regex,
        cls: "rule_input"
      }).onchange = (e) => {
        rule.regex = e.target.value;
        this.plugin.settings.movingRules.map((r) => r === rule ? rule : r);
        this.plugin.saveData(this.plugin.settings);
      };
      child.createEl("input", {
        value: rule.folder,
        cls: "rule_input"
      }).onchange = (e) => {
        rule.folder = e.target.value;
        this.plugin.settings.movingRules.map((r) => r === rule ? rule : r);
        this.plugin.saveData(this.plugin.settings);
      };
      const duplicateRuleButton = child.createEl("button", {
        text: "\u2FFB",
        cls: "rule_button rule_button_duplicate"
      });
      duplicateRuleButton.addEventListener("click", () => {
        this.plugin.settings.movingRules.push(
          new MovingRule(rule.regex, rule.folder)
        );
        this.display();
      });
      const deleteRuleButton = child.createEl("button", {
        text: "x",
        cls: "rule_button rule_button_remove"
      });
      deleteRuleButton.addEventListener("click", () => {
        this.plugin.settings.movingRules = this.plugin.settings.movingRules.filter((r) => r !== rule);
        this.display();
      });
    }
    const exclusionRuleContainer = containerEl.createDiv({
      cls: "moving_rules_container"
    });
    new obsidian.Setting(exclusionRuleContainer).setName("Exclusion rules").setHeading();
    const exclusionList = exclusionRuleContainer.createDiv({
      cls: "rule_list"
    });
    const exclusionHeader = exclusionList.createDiv({
      cls: "rule margig_right"
    });
    exclusionHeader.createEl("p", {
      text: "Excluded folders or files (string or regex)",
      cls: "rule_title"
    });
    const addExclusionButton = exclusionHeader.createEl("button", {
      text: "+",
      cls: "rule_button"
    });
    addExclusionButton.addEventListener("click", () => {
      this.plugin.settings.exclusionRules.push(new ExclusionRule());
      this.display();
    });
    for (const exclusion of this.plugin.settings.exclusionRules) {
      const child = exclusionList.createDiv({ cls: "rule" });
      child.createEl("input", {
        value: exclusion.regex,
        cls: "rule_input"
      }).onchange = (e) => {
        exclusion.regex = e.target.value;
        this.plugin.settings.exclusionRules.map(
          (ef) => ef === exclusion ? exclusion : ef
        );
        this.plugin.saveData(this.plugin.settings);
      };
      const duplicateExclusionButton = child.createEl("button", {
        text: "\u2FFB",
        cls: "rule_button rule_button_duplicate"
      });
      duplicateExclusionButton.addEventListener("click", () => {
        this.plugin.settings.exclusionRules.push(
          new ExclusionRule(exclusion.regex)
        );
        this.display();
      });
      const deleteExclusionButton = child.createEl("button", {
        text: "x",
        cls: "rule_button rule_button_remove"
      });
      deleteExclusionButton.addEventListener("click", () => {
        this.plugin.settings.exclusionRules = this.plugin.settings.exclusionRules.filter((r) => r !== exclusion);
        this.display();
      });
    }
  }
};

// Utils/ExclusionMatcherUtil.ts
var ExclusionMatcherUtil = class {
  constructor() {
  }
  static getInstance() {
    if (!ExclusionMatcherUtil.instance) {
      ExclusionMatcherUtil.instance = new ExclusionMatcherUtil();
    }
    return ExclusionMatcherUtil.instance;
  }
  /**
   * This method is used to check if the file is excluded by the exclusion rule
   * @param file - The file to be checked
   * @param exclusionRules - The exclusion rule to be used
   * @returns true if the file path is excluded, false otherwise
   */
  isFilePathExcluded(file, exclusionRules) {
    for (const rule of exclusionRules) {
      const regex = new RegExp(rule.regex);
      if (regex.test(file.path)) {
        return true;
      }
    }
    return false;
  }
};
var exclusionMatcherUtil = ExclusionMatcherUtil.getInstance();
var ExclusionMatcherUtil_default = exclusionMatcherUtil;

// Utils/MovingUtil.ts
var import_obsidian2 = require("obsidian");
var MovingUtil = class {
  constructor() {
  }
  static getInstance() {
    if (!MovingUtil.instance) {
      MovingUtil.instance = new MovingUtil();
    }
    return MovingUtil.instance;
  }
  init(app) {
    this.app = app;
  }
  /**
   * Checks if the path is a file
   *
   * @param path - Path to be checked
   * @returns boolean
   */
  isFile(path) {
    const file = this.app.vault.getAbstractFileByPath(path);
    return file instanceof import_obsidian2.TFile;
  }
  /**
   * Checks if the path is a folder
   *
   * @param path - Path to be checked
   * @returns boolean
   */
  isFolder(path) {
    return this.app.vault.getAbstractFileByPath(path) instanceof import_obsidian2.TFolder;
  }
  /**
   * Moves the file to the destination path
   *
   * @param file - File to be moved
   * @param newPath - Destination path
   * @returns void
   */
  moveFile(file, newPath) {
    if (this.isFolder(newPath)) {
      this.app.vault.rename(file, `${newPath}/${file.name}`);
    } else {
      new import_obsidian2.Notice(
        `Invalid destination path
${newPath} is not a folder!
Creating requested folder.`,
        5e3
      );
      console.error(
        `Invalid destination path
${newPath} is not a folder!
Creating requested folder.`
      );
      this.createMissingFolders(newPath).then(() => {
        this.app.vault.rename(file, `${newPath}/${file.name}`);
      });
    }
  }
  /**
   * Moves the folder to the destination path
   *
   * @param folder - Folder to be moved
   * @param newPath - Destination path
   * @returns void
   */
  moveFolder(folder, newPath) {
    if (this.isFolder(newPath)) {
      this.app.vault.rename(folder, `${newPath}/${folder.name}`);
    } else {
      new import_obsidian2.Notice(`Invalid destination path
${newPath} is not a folder!`, 5e3);
      console.error(`Invalid destination path
${newPath} is not a folder!`);
    }
  }
  /**
   * Creates folder in destination path if it does not exist already
   *
   * @param path - Path of the folder to be created
   * @returns Created folder or null if folder already exists
   */
  createFolder(path) {
    if (!this.isFolder(path)) {
      this.app.vault.createFolder(path).then((folder) => {
        return folder;
      });
    } else {
      new import_obsidian2.Notice("Folder already exists", 5e3);
      console.error("Folder already exists");
    }
    return null;
  }
  /**
   * Splits the path into an array of strings
   *
   * @param path - Path to be split
   * @returns string[]
   */
  splitPath(path) {
    return path.split("/");
  }
  /**
   * Create missing folders in the path
   *
   * @param path - Path to be checked
   * @returns void
   */
  async createMissingFolders(path) {
    const splitPath = this.splitPath(path);
    let currentPath = "";
    for (const folder of splitPath) {
      currentPath += folder;
      if (!this.isFolder(currentPath)) {
        await this.app.vault.createFolder(path);
      }
      currentPath += "/";
    }
    if (this.isFolder(path)) {
      return true;
    }
    return false;
  }
};
var movingUtil = MovingUtil.getInstance();
var MovingUtil_default = movingUtil;

// Utils/RuleMatcherUtil.ts
var RuleMatcherUtil = class {
  constructor() {
  }
  static getInstance() {
    if (!RuleMatcherUtil.instance) {
      RuleMatcherUtil.instance = new RuleMatcherUtil();
    }
    return RuleMatcherUtil.instance;
  }
  /**
   * Returns the first rule that matches the file
   * If no rule matches, returns null
   *
   * @param file
   * @param rules
   * @returns MovingRule | null
   */
  getMatchingRule(file, rules) {
    for (const rule of rules) {
      if (rule.regex == null || rule.regex === "") {
        console.error("Rule does not have a regex: ", rule);
        continue;
      }
      if (rule.folder == null || rule.folder === "") {
        console.error("Rule does not have a destination folder: ", rule);
        continue;
      }
      if (!this.isValidRegex(rule.regex)) {
        console.error("Rule has an invalid regex: ", rule);
        continue;
      }
      if (file.name.match(rule.regex)) {
        return rule;
      }
    }
    return null;
  }
  /**
   * Returns the regex groups of the file that match the rule
   * If no groups match, returns an empty array
   *
   * @param file
   * @param rule
   * @returns string[]
   */
  getGroupMatches(file, rule) {
    const matches = file.name.match(rule.regex);
    return matches;
  }
  /**
   * Checks if the regex pattern is valid
   * Meaning, syntax errors are caught, but not logical errors
   *
   * @param pattern
   * @returns boolean
   */
  isValidRegex(pattern) {
    try {
      new RegExp(pattern);
      return true;
    } catch (e) {
      if (e instanceof SyntaxError) {
        console.error(`Invalid regex pattern: ${e.message}`);
      }
      return false;
    }
  }
  /**
   * Constructs the final destination path from the matched groups
   * The path is constructed by replacing the $1, $2, $3, etc. with the matched groups
   *
   * @param rule
   * @param matches
   */
  constructFinalDesinationPath(rule, matches) {
    var _a;
    let folderPath = rule.folder;
    const unnamedGroups = this.getUnnamedGroups(rule.regex);
    for (let i = 0; i < unnamedGroups.length; i++) {
      folderPath = folderPath.replace(`$${i + 1}`, (_a = matches[i + 1]) != null ? _a : "");
    }
    return folderPath;
  }
  /**
   * Is regex grouped
   * Groups are defined by (...) and used with $1, $2, $3, etc.
   *
   * @param rule
   * @returns boolean
   */
  isRegexGrouped(rule) {
    return this.doesDestinationUseGroups(rule) && this.getUnnamedGroups(rule.regex) != null;
  }
  /**
   * Returns the unnamed groups in the regex pattern
   *
   * @param pattern
   * @returns RegExpMatchArray | null
   */
  getUnnamedGroups(pattern) {
    return pattern.match(/\(/g);
  }
  /**
   * Does destination use groups
   * Groups are defined by $1, $2, $3, etc.
   *
   * @param rule
   * @returns boolean
   */
  doesDestinationUseGroups(rule) {
    return /\$\d/.test(rule.folder);
  }
};
var ruleMatcherUtil = RuleMatcherUtil.getInstance();
var RuleMatcherUtil_default = ruleMatcherUtil;

// main.ts
var obsidian2 = __toESM(require("obsidian"));
var AutoMoverPlugin = class extends obsidian2.Plugin {
  async onload() {
    MovingUtil_default.init(this.app);
    SettingsIO_default.init(this.app);
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
    this.addSettingTab(new SettingsTab(this.app, this));
    if (!this.areMovingTriggersEnabled())
      return;
    if (!this.areThereRulesToApply())
      return;
    if (!this.areRulesValid())
      return;
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        if (!this.settings.moveOnOpen)
          return;
        if (file == null || file.path == null)
          return;
        if (this.isFileExcluded(file))
          return;
        this.matchAndMoveFile(file);
      })
    );
    this.registerEvent(
      // since i am defining my own event, ts-lint is crying about it but it works in the end
      this.app.workspace.on("AutoMover:automatic-moving-update", () => {
        this.automaticMoving();
      })
    );
    this.addCommand({
      id: "AutoMover:move-files",
      name: "Move files",
      callback: () => {
        this.goThroughAllFiles();
      }
    });
    this.addRibbonIcon("file-input", "AutoMover: Move files", () => {
      this.goThroughAllFiles();
    });
  }
  /**
   * Reocurring function that will be called by the timer
   *
   * @returns void
   */
  automaticMoving() {
    if (!this.settings.automaticMoving)
      return;
    if (this.settings.timer == null || this.settings.timer <= 0)
      return;
    this.goThroughAllFiles();
    TimerUtil_default.startTimer(this.automaticMoving.bind(this), this.settings.timer);
  }
  /**
   * Opens all files in the repository so that the even "file-open" is triggered
   *
   * @returns void
   */
  goThroughAllFiles() {
    const files = this.app.vault.getFiles();
    for (const file of files) {
      if (file == null || file.path == null)
        continue;
      if (this.isFileExcluded(file))
        continue;
      this.matchAndMoveFile(file);
    }
    new obsidian2.Notice("All files moved!", 5e3);
  }
  /**
   * Checks if the file is excluded by the exclusion rule
   *
   * @param file - The file to be checked
   * @returns true if the file path is excluded, false otherwise
   */
  isFileExcluded(file) {
    if (!this.areThereExcludedFolders())
      return false;
    if (!this.areThereRulesToApply())
      return false;
    return ExclusionMatcherUtil_default.isFilePathExcluded(
      file,
      this.settings.exclusionRules
    );
  }
  /**
   * Matches the file to the rule and moves it to the destination folder
   *
   * @param file - File to be matched and moved
   * @returns void
   */
  matchAndMoveFile(file) {
    const rule = RuleMatcherUtil_default.getMatchingRule(
      file,
      this.settings.movingRules
    );
    if (rule == null || rule.folder == null)
      return;
    if (RuleMatcherUtil_default.isRegexGrouped(rule)) {
      const matches = RuleMatcherUtil_default.getGroupMatches(file, rule);
      const finalDestinationPath = RuleMatcherUtil_default.constructFinalDesinationPath(
        rule,
        matches
      );
      MovingUtil_default.moveFile(file, finalDestinationPath);
    } else {
      MovingUtil_default.moveFile(file, rule.folder);
    }
  }
  async asyncloadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async onunload() {
  }
  /**
   * No point in doing anything if there is no trigger set which will cause you to move the files
   * @returns boolean
   */
  areMovingTriggersEnabled() {
    return this.settings.moveOnOpen;
  }
  /**
   * If there are no rules to apply, then there is no point in checking for them
   * @returns boolean
   */
  areThereRulesToApply() {
    return this.settings.movingRules.length > 0 && this.settings.movingRules.every(
      (rule) => rule.regex !== "" && rule.folder !== ""
    );
  }
  /**
   * If there are no excluded folders, then we can move thing freely
   * @returns boolean
   */
  areThereExcludedFolders() {
    return this.settings.exclusionRules.length > 0;
  }
  /**
   * Superficail check if the rules are valid
   * @returns boolean
   */
  areRulesValid() {
    return this.settings.movingRules.every(
      (rule) => rule.regex !== "" && rule.folder !== ""
    );
  }
  /**
   * Superficail check if the excluded folders are valid
   * @returns boolean
   */
  areExcludedFoldersValid() {
    return this.settings.exclusionRules.every((rule) => rule.regex !== "");
  }
};


/* nosourcemap */